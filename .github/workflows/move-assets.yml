name: Updated Move Assets to Release

permissions:
  contents: write
  actions: write
 
on:
  workflow_dispatch:
  workflow_run:
    workflows: ["build-macos.yml"] # This ensures `move-assets.yml` runs AFTER `build-macos.yml`
    types:
      - completed
  push:
    tags:
    - '*'

jobs:
  download_assets:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history and tags
    
    - name: Extract tag name from ref or get latest tag
      id: get_tag
      run: |
        if [[ "${{ github.ref }}" == refs/tags/* ]]; then
          # When directly triggered by a tag push
          TAG_NAME=${GITHUB_REF#refs/tags/}
          echo "Using tag from push trigger: $TAG_NAME"
        else
          # When triggered by workflow_run or workflow_dispatch
          # Get the latest tag from the repository
          git fetch --tags
          TAG_NAME=$(git describe --tags --abbrev=0)
          
          # If no tag found, use timestamp
          if [ -z "$TAG_NAME" ]; then
            TIMESTAMP=$(date +'%Y.%m.%d-%H%M')
            TAG_NAME="v${TIMESTAMP}"
            echo "No tag found, using generated version: $TAG_NAME"
          else
            echo "Using latest tag from repository: $TAG_NAME"
          fi
        fi
        
        # Store the tag name for later use
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        
        # Debug output
        echo "Selected TAG_NAME: $TAG_NAME"

    - name: Fetch Windows exe
      uses: dawidd6/action-download-artifact@v8
      with:
        workflow: build-windows.yml
        name: nlpw.exe

    - name: Fetch Windows icu1
      uses: dawidd6/action-download-artifact@v8
      with:
        workflow: build-windows.yml
        name: "icudt74.dll"

    - name: Fetch Windows icu2
      uses: dawidd6/action-download-artifact@v8
      with:
        workflow: build-windows.yml
        name: "icuuc74.dll"
        
    - name: Fetch Linux exe
      uses: dawidd6/action-download-artifact@v8
      with:
        workflow: build-linux.yml
        name: nlpl.exe
      
    - name: List Artifacts from MacOS Build
      run: |
        echo "🔍 Checking artifacts in build-macos.yml run..."
        LATEST_RUN_ID=$(gh api repos/${{ github.repository }}/actions/workflows/build-macos.yml/runs --paginate | jq -r '.workflow_runs[0].id')
        gh api repos/${{ github.repository }}/actions/runs/$LATEST_RUN_ID/artifacts --paginate | jq '.artifacts[].name'
        echo "LATEST_RUN_ID=$LATEST_RUN_ID" >> $GITHUB_ENV
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Fetch MacOS exe from Correct Run
      uses: dawidd6/action-download-artifact@v8
      with:
        workflow: build-macos.yml
        name: nlpm.exe
        run_id: ${{ env.LATEST_RUN_ID }}
    
    - name: Fetch Engine Files
      uses: dawidd6/action-download-artifact@v8
      with:
        workflow: build-enginefiles.yml
        name: "nlpengine.zip"

    - name: Fetch VisualText Files
      uses: dawidd6/action-download-artifact@v8
      with:
        workflow: build-visualfiles.yml
        name: "visualtext.zip"

    - name: Fetch Linux icu1
      uses: dawidd6/action-download-artifact@v8
      with:
        workflow: build-linux.yml
        name: "libicutu.a"

    - name: Fetch Linux icu2
      uses: dawidd6/action-download-artifact@v8
      with:
        workflow: build-linux.yml
        name: "libicuuc.a"
        
    - name: Fetch MacOS libicutum.a
      uses: dawidd6/action-download-artifact@v8
      with:
        workflow: build-macos.yml
        name: libicutum.a
        run_id: ${{ env.LATEST_RUN_ID }}

    - name: Fetch MacOS libicuucm.a
      uses: dawidd6/action-download-artifact@v8
      with:
        workflow: build-macos.yml
        name: libicuucm.a
        run_id: ${{ env.LATEST_RUN_ID }}

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: "Release ${{ env.TAG_NAME }}"
        body: "NLP Engine Release ${{ env.TAG_NAME }}"
        files: |
          ./nlpw.exe
          ./nlpl.exe
          ./nlpm.exe
          ./icudt74.dll
          ./icuuc74.dll
          ./libicutu.a
          ./libicuuc.a
          ./libicutum.a
          ./libicuucm.a
          ./nlpengine.zip
          ./visualtext.zip
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Trigger nlp-engine-windows workflow (API direct)
      run: |
        echo "Triggering Windows repo with tag ${{ env.TAG_NAME }}"
        curl -X POST \
          -H "Authorization: token ${{ secrets.CLASSIC_PAT }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/VisualText/nlp-engine-windows/dispatches \
          -d "{\"event_type\":\"nlp-engine-release\",\"client_payload\":{\"tag_name\":\"${{ env.TAG_NAME }}\"}}"
      continue-on-error: true

    - name: Trigger nlp-engine-linux workflow (API direct)
      run: |
        echo "Triggering Linux repo with tag ${{ env.TAG_NAME }}"
        curl -X POST \
          -H "Authorization: token ${{ secrets.CLASSIC_PAT }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/VisualText/nlp-engine-linux/dispatches \
          -d "{\"event_type\":\"nlp-engine-release\",\"client_payload\":{\"tag_name\":\"${{ env.TAG_NAME }}\"}}"
      continue-on-error: true

    - name: Trigger nlp-engine-mac workflow (API direct)
      run: |
        echo "Triggering Mac repo with tag ${{ env.TAG_NAME }}"
        curl -X POST \
          -H "Authorization: token ${{ secrets.CLASSIC_PAT }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/VisualText/nlp-engine-mac/dispatches \
          -d "{\"event_type\":\"nlp-engine-release\",\"client_payload\":{\"tag_name\":\"${{ env.TAG_NAME }}\"}}"
      continue-on-error: true